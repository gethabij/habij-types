/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/journal-logs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List journal logs
         * @description Get list of journal logs with optional date and type filters
         */
        get: operations["journal_logs_list"];
        put?: never;
        /**
         * Create journal log
         * @description Create a new journal log entry. If type is 'todo', scheduled_for is required
         */
        post: operations["journal_logs_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/journal-logs/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["journal_logs_retrieve"];
        put: operations["journal_logs_update"];
        post?: never;
        delete: operations["journal_logs_destroy"];
        options?: never;
        head?: never;
        patch: operations["journal_logs_partial_update"];
        trace?: never;
    };
    "/api/journal-logs/{id}/habitize/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change to habit
         * @description Update a log or todo to a habit
         */
        post: operations["journal_logs_habitize_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/journal-logs/{id}/done/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark journal log as done
         * @description Update the done_at field of a journal log to the current date and time.
         */
        post: operations["journal_logs_done_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_list"];
        put?: never;
        /**
         * Create new user
         * @description Create a new user with the provided data
         */
        post: operations["users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_retrieve"];
        /**
         * Update user
         * @description Update user information
         */
        put: operations["users_update"];
        post?: never;
        delete: operations["users_destroy"];
        options?: never;
        head?: never;
        patch: operations["users_partial_update"];
        trace?: never;
    };
    "/api/users/{id}/activate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate user
         * @description Reactivate deactivated user
         */
        post: operations["users_activate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/deactivate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate user
         * @description Soft delete user by setting is_active to False
         */
        post: operations["users_deactivate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Login with email and password to get JWT tokens
         */
        post: operations["auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh token
         * @description Get new access token using refresh token
         */
        post: operations["auth_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/verify/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a token and indicates if it is valid.  This view provides no
         *     information about a token's fitness for a particular use. */
        post: operations["auth_verify_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Blacklist the refresh token
         */
        post: operations["auth_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signup/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User signup
         * @description Register a new user account
         */
        post: operations["auth_signup_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        JournalLogCreateRequest: {
            text: string;
            type?: components["schemas"]["TypeEnum"];
            /** Format: date-time */
            scheduled_for?: string | null;
        };
        JournalLogList: {
            readonly id: number;
            text: string;
            type?: components["schemas"]["TypeEnum"];
            /** Format: date-time */
            scheduled_for?: string | null;
            /** Format: date-time */
            done_at?: string | null;
            /** Format: date-time */
            readonly created_at: string;
        };
        JournalLogListRequest: {
            text: string;
            type?: components["schemas"]["TypeEnum"];
            /** Format: date-time */
            scheduled_for?: string | null;
            /** Format: date-time */
            done_at?: string | null;
        };
        LoginRequest: {
            email: string;
            password: string;
        };
        PatchedJournalLogListRequest: {
            text?: string;
            type?: components["schemas"]["TypeEnum"];
            /** Format: date-time */
            scheduled_for?: string | null;
            /** Format: date-time */
            done_at?: string | null;
        };
        PatchedUserDetailRequest: {
            /**
             * Email address
             * Format: email
             */
            email?: string;
            first_name?: string | null;
            last_name?: string | null;
            phone_number?: string | null;
            /** Format: date */
            date_of_birth?: string | null;
            is_active?: boolean;
        };
        SignUpRequest: {
            /**
             * Email address
             * Format: email
             */
            email: string;
            password: string;
            confirm_password: string;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        TokenRefreshRequest: {
            refresh: string;
        };
        TokenVerifyRequest: {
            token: string;
        };
        /**
         * @description * `habit` - Habit
         *     * `log` - Log
         *     * `todo` - Todo
         * @enum {string}
         */
        TypeEnum: "habit" | "log" | "todo";
        UserCreate: {
            readonly id: number;
            /**
             * Email address
             * Format: email
             */
            email: string;
            first_name?: string | null;
            last_name?: string | null;
            phone_number?: string | null;
            /** Format: date */
            date_of_birth?: string | null;
        };
        UserCreateRequest: {
            /**
             * Email address
             * Format: email
             */
            email: string;
            first_name?: string | null;
            last_name?: string | null;
            phone_number?: string | null;
            /** Format: date */
            date_of_birth?: string | null;
            password: string;
            confirm_password: string;
        };
        UserDetail: {
            readonly id: number;
            /**
             * Email address
             * Format: email
             */
            email: string;
            first_name?: string | null;
            last_name?: string | null;
            phone_number?: string | null;
            /** Format: date */
            date_of_birth?: string | null;
            is_active?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        UserDetailRequest: {
            /**
             * Email address
             * Format: email
             */
            email: string;
            first_name?: string | null;
            last_name?: string | null;
            phone_number?: string | null;
            /** Format: date */
            date_of_birth?: string | null;
            is_active?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    journal_logs_list: {
        parameters: {
            query?: {
                /** @description Filter by date (YYYY-MM-DD) */
                date?: string;
                /** @description Filter by log type (habit/log/todo) */
                type?: "habit" | "log" | "todo";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalLogList"][];
                };
            };
        };
    };
    journal_logs_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JournalLogCreateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["JournalLogCreateRequest"];
                "multipart/form-data": components["schemas"]["JournalLogCreateRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalLogList"];
                };
            };
        };
    };
    journal_logs_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalLogList"];
                };
            };
        };
    };
    journal_logs_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JournalLogListRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["JournalLogListRequest"];
                "multipart/form-data": components["schemas"]["JournalLogListRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalLogList"];
                };
            };
        };
    };
    journal_logs_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    journal_logs_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedJournalLogListRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedJournalLogListRequest"];
                "multipart/form-data": components["schemas"]["PatchedJournalLogListRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalLogList"];
                };
            };
        };
    };
    journal_logs_habitize_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JournalLogListRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["JournalLogListRequest"];
                "multipart/form-data": components["schemas"]["JournalLogListRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalLogList"];
                };
            };
        };
    };
    journal_logs_done_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JournalLogListRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["JournalLogListRequest"];
                "multipart/form-data": components["schemas"]["JournalLogListRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalLogList"];
                };
            };
        };
    };
    users_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetail"][];
                };
            };
        };
    };
    users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserCreateRequest"];
                "multipart/form-data": components["schemas"]["UserCreateRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserCreate"];
                };
            };
        };
    };
    users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetail"];
                };
            };
        };
    };
    users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDetailRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserDetailRequest"];
                "multipart/form-data": components["schemas"]["UserDetailRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetail"];
                };
            };
        };
    };
    users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserDetailRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUserDetailRequest"];
                "multipart/form-data": components["schemas"]["PatchedUserDetailRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetail"];
                };
            };
        };
    };
    users_activate_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDetailRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserDetailRequest"];
                "multipart/form-data": components["schemas"]["UserDetailRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetail"];
                };
            };
        };
    };
    users_deactivate_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDetailRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserDetailRequest"];
                "multipart/form-data": components["schemas"]["UserDetailRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetail"];
                };
            };
        };
    };
    auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LoginRequest"];
                "multipart/form-data": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        access?: string;
                        refresh?: string;
                        user?: {
                            id?: number;
                            email?: string;
                            first_name?: string;
                            last_name?: string;
                        };
                    };
                };
            };
        };
    };
    auth_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefreshRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshRequest"];
                "multipart/form-data": components["schemas"]["TokenRefreshRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    auth_verify_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenVerifyRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenVerifyRequest"];
                "multipart/form-data": components["schemas"]["TokenVerifyRequest"];
            };
        };
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_signup_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SignUpRequest"];
                "multipart/form-data": components["schemas"]["SignUpRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        user?: {
                            id?: number;
                            email?: string;
                            first_name?: string;
                            last_name?: string;
                        };
                        tokens?: {
                            access?: string;
                            refresh?: string;
                        };
                    };
                };
            };
        };
    };
}
